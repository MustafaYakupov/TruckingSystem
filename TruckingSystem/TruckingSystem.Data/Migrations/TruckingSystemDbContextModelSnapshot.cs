// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckingSystem.Data;

#nullable disable

namespace TruckingSystem.Data.Migrations
{
    [DbContext(typeof(TruckingSystemDbContext))]
    partial class TruckingSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrokerCompanyDriverManager", b =>
                {
                    b.Property<Guid>("BrokerCompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverManagersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrokerCompaniesId", "DriverManagersId");

                    b.HasIndex("DriverManagersId");

                    b.ToTable("BrokerCompanyDriverManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.AvailableDispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Available dispatch identifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.BrokerCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Broker company name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather Broker Company is deleted or not");

                    b.HasKey("Id");

                    b.ToTable("BrokerCompanies");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.CompletedDispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Complete dispatch identifier");

                    b.HasKey("Id");

                    b.ToTable("CompletedDispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid?>("AvailableDispatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedDispatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid>("DriverManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DriverManager Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather dispatch is deleted or not");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Load Unique Identifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Trailer Unique Identifier");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Truck Unique Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDispatchId");

                    b.HasIndex("CompletedDispatchId");

                    b.HasIndex("DriverId");

                    b.HasIndex("DriverManagerId");

                    b.HasIndex("LoadId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid?>("DriverManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's Manager");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver first name");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather the driver is busy or available");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather driver is deleted or not");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver last name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver license number");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's trailer");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's truck");

                    b.HasKey("Id");

                    b.HasIndex("DriverManagerId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.DriverManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver manager first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver manager last name");

                    b.HasKey("Id");

                    b.ToTable("DriverManagers");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Load", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid>("BrokerCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BrokerCompany identifier");

                    b.Property<string>("DeliveryLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address where the load is going to");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2")
                        .HasComment("Delivery appointment time");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasComment("Load distance");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Driver identifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows if the load is assigned or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather load is deleted or not");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address where the load is shipping from");

                    b.Property<DateTime>("PickupTime")
                        .HasColumnType("datetime2")
                        .HasComment("Pick up appointment time");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float")
                        .HasComment("Temperature the product must be kept at");

                    b.Property<int>("Weight")
                        .HasColumnType("int")
                        .HasComment("Weight of the product");

                    b.HasKey("Id");

                    b.HasIndex("BrokerCompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("Loads");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather part is deleted or not");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Part make");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Part type");

                    b.HasKey("Id");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather trailer is available or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather trailer is deleted or not");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Trailer make");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasComment("Trailer production year");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Trailer type");

                    b.HasKey("Id");

                    b.ToTable("Trailers");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Truck color");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather truck is available or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather truck is deleted or not");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("Truck license plate");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck model");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasComment("Truck produciton year");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Trailer identifier");

                    b.Property<int>("TruckNumber")
                        .HasColumnType("int")
                        .HasComment("Truck number");

                    b.HasKey("Id");

                    b.HasIndex("TrailerId")
                        .IsUnique()
                        .HasFilter("[TrailerId] IS NOT NULL");

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.TruckPart", b =>
                {
                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game identifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Part identifier");

                    b.HasKey("TruckId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("TrucksParts");
                });

            modelBuilder.Entity("BrokerCompanyDriverManager", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.BrokerCompany", null)
                        .WithMany()
                        .HasForeignKey("BrokerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.DriverManager", null)
                        .WithMany()
                        .HasForeignKey("DriverManagersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Dispatch", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.AvailableDispatch", null)
                        .WithMany("Dispatches")
                        .HasForeignKey("AvailableDispatchId");

                    b.HasOne("TruckingSystem.Data.Models.CompletedDispatch", null)
                        .WithMany("Dispatches")
                        .HasForeignKey("CompletedDispatchId");

                    b.HasOne("TruckingSystem.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.DriverManager", "DriverManager")
                        .WithMany("Dispatches")
                        .HasForeignKey("DriverManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("DriverManager");

                    b.Navigation("Load");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.DriverManager", "DriverManager")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverManagerId");

                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId");

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithOne("Driver")
                        .HasForeignKey("TruckingSystem.Data.Models.Driver", "TruckId");

                    b.Navigation("DriverManager");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Load", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.BrokerCompany", "BrokerCompany")
                        .WithMany("Loads")
                        .HasForeignKey("BrokerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Driver", "Driver")
                        .WithMany("Loads")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrokerCompany");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithOne("Truck")
                        .HasForeignKey("TruckingSystem.Data.Models.Truck", "TrailerId");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.TruckPart", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.Part", "Part")
                        .WithMany("TruckParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithMany("TrucksParts")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.AvailableDispatch", b =>
                {
                    b.Navigation("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.BrokerCompany", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.CompletedDispatch", b =>
                {
                    b.Navigation("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.DriverManager", b =>
                {
                    b.Navigation("Dispatches");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Part", b =>
                {
                    b.Navigation("TruckParts");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Trailer", b =>
                {
                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("TrucksParts");
                });
#pragma warning restore 612, 618
        }
    }
}
