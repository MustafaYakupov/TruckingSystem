// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TruckingSystem.Data;

#nullable disable

namespace TruckingSystem.Data.Migrations
{
    [DbContext(typeof(TruckingSystemDbContext))]
    [Migration("20241114203458_SeedDatabase")]
    partial class SeedDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrokerCompanyDriverManager", b =>
                {
                    b.Property<Guid>("BrokerCompaniesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverManagersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BrokerCompaniesId", "DriverManagersId");

                    b.HasIndex("DriverManagersId");

                    b.ToTable("BrokerCompanyDriverManager");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.AvailableDispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Available dispatch identifier");

                    b.HasKey("Id");

                    b.ToTable("AvailableDispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.BrokerCompany", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Broker company name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather Broker Company is deleted or not");

                    b.HasKey("Id");

                    b.ToTable("BrokerCompanies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3f06f5a-99f8-4c5b-a4e4-323e543245b3"),
                            CompanyName = "Swift Transports",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("91a8b3d5-6319-4e09-9a5b-d4bb01c47bcf"),
                            CompanyName = "Freight Partners LLC",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("e01235bc-6de9-4af2-a6f8-d431a40bc9a3"),
                            CompanyName = "Road King Logistics",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59c6e7d3-8aef-40bc-94c4-0f2f7a8f4d4f"),
                            CompanyName = "Allied Freight Solutions",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("18f9e2c7-6e29-4bb7-b7d4-5383d8c9f1a7"),
                            CompanyName = "Global Trucking Co.",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.CompletedDispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Complete dispatch identifier");

                    b.HasKey("Id");

                    b.ToTable("CompletedDispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid?>("AvailableDispatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompletedDispatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid>("DriverManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("DriverManager Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather dispatch is deleted or not");

                    b.Property<Guid>("LoadId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Load Unique Identifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Trailer Unique Identifier");

                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Truck Unique Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AvailableDispatchId");

                    b.HasIndex("CompletedDispatchId");

                    b.HasIndex("DriverId");

                    b.HasIndex("DriverManagerId");

                    b.HasIndex("LoadId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid?>("DriverManagerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's Manager");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver first name");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather the driver is busy or available");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather driver is deleted or not");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver last name");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Driver license number");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's trailer");

                    b.Property<Guid?>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The Identifier of the driver's truck");

                    b.HasKey("Id");

                    b.HasIndex("DriverManagerId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("TruckId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b9a8f4b-812e-40c2-b7e3-f8a5c6f2b901"),
                            FirstName = "James",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Brown",
                            LicenseNumber = "JMB123456"
                        },
                        new
                        {
                            Id = new Guid("f18b8f4d-9b1a-4bc2-a729-9f12a8c2b721"),
                            FirstName = "Lily",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Smith",
                            LicenseNumber = "LYS789012"
                        },
                        new
                        {
                            Id = new Guid("b2912d4e-8b21-4ef3-b02d-2b6f0a1c8d32"),
                            FirstName = "Oliver",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Johnson",
                            LicenseNumber = "OLJ456789"
                        },
                        new
                        {
                            Id = new Guid("e1928b4e-8f31-41e3-b03d-4f7a3a6c9b21"),
                            FirstName = "Sophia",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Williams",
                            LicenseNumber = "SOP012345"
                        },
                        new
                        {
                            Id = new Guid("c7a8b34f-9f4a-43d2-a73f-7b4a5b2e3b20"),
                            FirstName = "Liam",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Jones",
                            LicenseNumber = "LIJ345678"
                        },
                        new
                        {
                            Id = new Guid("f9b3a2f0-9d2b-4e3f-b02c-8a5b6b3e1a71"),
                            FirstName = "Emma",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Garcia",
                            LicenseNumber = "EMG678901"
                        },
                        new
                        {
                            Id = new Guid("b5a7f4e1-9c2a-40e2-b71a-2a6c8d3f1b81"),
                            FirstName = "Noah",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Martinez",
                            LicenseNumber = "NOM901234"
                        },
                        new
                        {
                            Id = new Guid("e3b7d5f2-8b1c-42e3-a92d-4c7f3b5e0a41"),
                            FirstName = "Isabella",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Davis",
                            LicenseNumber = "ISD234567"
                        },
                        new
                        {
                            Id = new Guid("c6b4a2d3-8d2f-41f3-a03c-3a5d8b7e2c61"),
                            FirstName = "William",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Rodriguez",
                            LicenseNumber = "WIR567890"
                        },
                        new
                        {
                            Id = new Guid("b1d4c7f4-8a2b-4c3e-b91d-1c3f7a5b2e90"),
                            FirstName = "Mia",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Hernandez",
                            LicenseNumber = "MIH890123"
                        },
                        new
                        {
                            Id = new Guid("f4b3c6d5-9a1f-4d3f-b12d-3b5e6f2a7c01"),
                            FirstName = "Lucas",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Lopez",
                            LicenseNumber = "LUL123890"
                        },
                        new
                        {
                            Id = new Guid("c9b1f5e3-8f2c-41d2-a92d-6b7a5e2d3c12"),
                            FirstName = "Amelia",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Gonzalez",
                            LicenseNumber = "AMG345012"
                        },
                        new
                        {
                            Id = new Guid("d2a4e7b5-8b3f-4c2d-b51c-4a7f8e1b0c31"),
                            FirstName = "Alexander",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Wilson",
                            LicenseNumber = "ALW678134"
                        },
                        new
                        {
                            Id = new Guid("e3c6b7f1-9d3a-4f2e-a82d-2b7a4d6e5b21"),
                            FirstName = "Charlotte",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Anderson",
                            LicenseNumber = "CHA901456"
                        },
                        new
                        {
                            Id = new Guid("b2f7a4e5-8c2d-41e3-b02f-7a6e3d1b5c31"),
                            FirstName = "Henry",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Thomas",
                            LicenseNumber = "HET345678"
                        },
                        new
                        {
                            Id = new Guid("f3b2c6a1-8f3d-4c2f-b21d-3a7f6b4e1c72"),
                            FirstName = "Ella",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Taylor",
                            LicenseNumber = "ELT678134"
                        },
                        new
                        {
                            Id = new Guid("d7c5b4e2-9a2f-41c3-b03d-6e7b3f4d1a61"),
                            FirstName = "Michael",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Moore",
                            LicenseNumber = "MIC890456"
                        },
                        new
                        {
                            Id = new Guid("e2b4c3f1-9d2e-4f3f-a01c-5d3a4b7e2f01"),
                            FirstName = "Evelyn",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Jackson",
                            LicenseNumber = "EVJ012389"
                        },
                        new
                        {
                            Id = new Guid("c5f3b4e1-8d2f-41a3-b91d-7a6c8e1d3b41"),
                            FirstName = "Benjamin",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "White",
                            LicenseNumber = "BEW456901"
                        },
                        new
                        {
                            Id = new Guid("d8a3c7b5-9b3a-4f2d-b02e-2f5e7b4c6d12"),
                            FirstName = "Sofia",
                            IsAvailable = true,
                            IsDeleted = false,
                            LastName = "Harris",
                            LicenseNumber = "SOH789345"
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.DriverManager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver manager first name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Driver manager last name");

                    b.HasKey("Id");

                    b.ToTable("DriverManagers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d237e2c6-77fc-4f38-823d-9a4a3d5f230c"),
                            FirstName = "John",
                            IsDeleted = false,
                            LastName = "Doe"
                        },
                        new
                        {
                            Id = new Guid("e17b45d5-99c3-4d2b-b894-8b4a543d8d27"),
                            FirstName = "Alice",
                            IsDeleted = false,
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("b29f8c7f-5fa1-42e3-a0d7-4e6f9c9b8b23"),
                            FirstName = "Michael",
                            IsDeleted = false,
                            LastName = "Johnson"
                        },
                        new
                        {
                            Id = new Guid("f12d25ef-3b21-4f4b-baf2-6d3e7a9c1a99"),
                            FirstName = "Emma",
                            IsDeleted = false,
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = new Guid("c2af7c54-9e28-48b9-a7f6-3b47a4a8e1d0"),
                            FirstName = "Chris",
                            IsDeleted = false,
                            LastName = "Taylor"
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Load", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<Guid>("BrokerCompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("BrokerCompany identifier");

                    b.Property<string>("DeliveryLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address where the load is going to");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2")
                        .HasComment("Delivery appointment time");

                    b.Property<int>("Distance")
                        .HasColumnType("int")
                        .HasComment("Load distance");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Driver identifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows if the load is assigned or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather load is deleted or not");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("The address where the load is shipping from");

                    b.Property<DateTime>("PickupTime")
                        .HasColumnType("datetime2")
                        .HasComment("Pick up appointment time");

                    b.Property<double?>("Temperature")
                        .HasColumnType("float")
                        .HasComment("Temperature the product must be kept at");

                    b.Property<int>("Weight")
                        .HasColumnType("int")
                        .HasComment("Weight of the product");

                    b.HasKey("Id");

                    b.HasIndex("BrokerCompanyId");

                    b.HasIndex("DriverId");

                    b.ToTable("Loads");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2e8fc12-5a4e-4d41-b8f2-c6ae5ea84600"),
                            BrokerCompanyId = new Guid("a3f06f5a-99f8-4c5b-a4e4-323e543245b3"),
                            DeliveryLocation = "Los Angeles, CA",
                            DeliveryTime = new DateTime(2025, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 2800,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "New York, NY",
                            PickupTime = new DateTime(2025, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 15.0,
                            Weight = 20000
                        },
                        new
                        {
                            Id = new Guid("f1c9d2e4-8b8d-43a6-baf3-d48e51d4920a"),
                            BrokerCompanyId = new Guid("a3f06f5a-99f8-4c5b-a4e4-323e543245b3"),
                            DeliveryLocation = "Houston, TX",
                            DeliveryTime = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 1080,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Chicago, IL",
                            PickupTime = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = -5.0,
                            Weight = 18000
                        },
                        new
                        {
                            Id = new Guid("3a9e2b56-957a-41a6-9bbd-b45d3f0d5e6f"),
                            BrokerCompanyId = new Guid("91a8b3d5-6319-4e09-9a5b-d4bb01c47bcf"),
                            DeliveryLocation = "Phoenix, AZ",
                            DeliveryTime = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 600,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Denver, CO",
                            PickupTime = new DateTime(2024, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 10.0,
                            Weight = 16000
                        },
                        new
                        {
                            Id = new Guid("4b8c2d65-a3c5-4f7e-9943-ec2d3d48f88e"),
                            BrokerCompanyId = new Guid("91a8b3d5-6319-4e09-9a5b-d4bb01c47bcf"),
                            DeliveryLocation = "San Francisco, CA",
                            DeliveryTime = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 800,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Seattle, WA",
                            PickupTime = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 8.0,
                            Weight = 21000
                        },
                        new
                        {
                            Id = new Guid("5c3f2b57-9f4d-4d85-b6f2-e73e5d88c77d"),
                            BrokerCompanyId = new Guid("e01235bc-6de9-4af2-a6f8-d431a40bc9a3"),
                            DeliveryLocation = "Orlando, FL",
                            DeliveryTime = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 440,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Atlanta, GA",
                            PickupTime = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 4.0,
                            Weight = 12000
                        },
                        new
                        {
                            Id = new Guid("6a7d5c4f-b4a6-44c6-af7d-9f2c3f88d4a3"),
                            BrokerCompanyId = new Guid("e01235bc-6de9-4af2-a6f8-d431a40bc9a3"),
                            DeliveryLocation = "Dallas, TX",
                            DeliveryTime = new DateTime(2025, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 1330,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Miami, FL",
                            PickupTime = new DateTime(2025, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 12.0,
                            Weight = 19000
                        },
                        new
                        {
                            Id = new Guid("7b8f2e6c-4c5f-4d66-9bbd-b47e3e88f22d"),
                            BrokerCompanyId = new Guid("59c6e7d3-8aef-40bc-94c4-0f2f7a8f4d4f"),
                            DeliveryLocation = "Philadelphia, PA",
                            DeliveryTime = new DateTime(2025, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 300,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Boston, MA",
                            PickupTime = new DateTime(2025, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = -2.0,
                            Weight = 14000
                        },
                        new
                        {
                            Id = new Guid("8c2f3a4e-5f3a-4f98-a3b6-b38e7e4d5e6f"),
                            BrokerCompanyId = new Guid("59c6e7d3-8aef-40bc-94c4-0f2f7a8f4d4f"),
                            DeliveryLocation = "Salt Lake City, UT",
                            DeliveryTime = new DateTime(2024, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 420,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Las Vegas, NV",
                            PickupTime = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 20.0,
                            Weight = 22000
                        },
                        new
                        {
                            Id = new Guid("9d6f5e3a-7d3b-45c7-b8e2-5f4a2f88e4f5"),
                            BrokerCompanyId = new Guid("18f9e2c7-6e29-4bb7-b7d4-5383d8c9f1a7"),
                            DeliveryLocation = "Minneapolis, MN",
                            DeliveryTime = new DateTime(2024, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 440,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Kansas City, MO",
                            PickupTime = new DateTime(2024, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = 5.0,
                            Weight = 16000
                        },
                        new
                        {
                            Id = new Guid("0f3a4d6f-8b2d-47a5-b8c7-f2d4e8f5b8a7"),
                            BrokerCompanyId = new Guid("18f9e2c7-6e29-4bb7-b7d4-5383d8c9f1a7"),
                            DeliveryLocation = "Indianapolis, IN",
                            DeliveryTime = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Distance = 290,
                            IsAvailable = true,
                            IsDeleted = false,
                            PickupLocation = "Nashville, TN",
                            PickupTime = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Temperature = -10.0,
                            Weight = 13000
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather part is deleted or not");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Part make");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Part type");

                    b.HasKey("Id");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f24baf3d-1f3c-4329-aafd-ea5cb99e5b6a"),
                            IsDeleted = false,
                            Make = "Cummins",
                            Type = "Engine"
                        },
                        new
                        {
                            Id = new Guid("4ed2e3d8-958d-4629-89f4-7e2b8d8d86b7"),
                            IsDeleted = false,
                            Make = "Allison",
                            Type = "Transmission"
                        },
                        new
                        {
                            Id = new Guid("8c49d3b5-3287-43f6-a6f1-2d8c9b1a7b8e"),
                            IsDeleted = false,
                            Make = "Bendix",
                            Type = "Brake System"
                        },
                        new
                        {
                            Id = new Guid("5a6ed2b7-b7a4-4fd9-8c49-b2e1d9f7c7b2"),
                            IsDeleted = false,
                            Make = "Hendrickson",
                            Type = "Suspension"
                        },
                        new
                        {
                            Id = new Guid("9d6ba2c5-d2e9-4c9b-8d8b-a2f9c6e8d7b3"),
                            IsDeleted = false,
                            Make = "Exide",
                            Type = "Battery"
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Trailer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather trailer is available or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather trailer is deleted or not");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Trailer make");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasComment("Trailer production year");

                    b.Property<int>("TrailerNumber")
                        .HasColumnType("int")
                        .HasComment("Trailer number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Trailer type");

                    b.HasKey("Id");

                    b.ToTable("Trailers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae48c5b1-2c1f-4a7b-8cc1-4b89d7cc9f42"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Utility",
                            ModelYear = 2021,
                            TrailerNumber = 500,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("c3e8b097-6340-45b0-8eb0-9578f8409f52"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Great Dane",
                            ModelYear = 2020,
                            TrailerNumber = 501,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("bfaad345-3a44-4d9a-b015-7f7b4f85d3a1"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Carrier",
                            ModelYear = 2019,
                            TrailerNumber = 502,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("83274bc8-bef1-47ab-bbb1-b4422eae8d44"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Utility",
                            ModelYear = 2022,
                            TrailerNumber = 503,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("263fe327-e883-468e-83b3-ff072b38944a"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Thermo King",
                            ModelYear = 2020,
                            TrailerNumber = 504,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("54830d70-bc69-4539-bd97-36d2093dfd0e"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Carrier",
                            ModelYear = 2018,
                            TrailerNumber = 505,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("47c3d1b7-9fa9-4ca6-9549-b9742fcf85cb"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Great Dane",
                            ModelYear = 2021,
                            TrailerNumber = 506,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("a189e23d-8eb9-4b83-b6ed-61ec5d8b04bc"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Utility",
                            ModelYear = 2019,
                            TrailerNumber = 507,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("cb49e342-d2b3-4b2b-9bb9-c2346d823dc0"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Carrier",
                            ModelYear = 2022,
                            TrailerNumber = 508,
                            Type = "Reefer"
                        },
                        new
                        {
                            Id = new Guid("d1b99cfa-cf73-4786-ae4a-4a49d1b179b5"),
                            IsAvailable = true,
                            IsDeleted = false,
                            Make = "Great Dane",
                            ModelYear = 2020,
                            TrailerNumber = 509,
                            Type = "Reefer"
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique Identifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Truck color");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Shows weather truck is available or not");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows weather truck is deleted or not");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Truck license plate");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck make");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Truck model");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int")
                        .HasComment("Truck produciton year");

                    b.Property<Guid?>("TrailerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Trailer identifier");

                    b.Property<int>("TruckNumber")
                        .HasColumnType("int")
                        .HasComment("Truck number");

                    b.HasKey("Id");

                    b.HasIndex("TrailerId")
                        .IsUnique()
                        .HasFilter("[TrailerId] IS NOT NULL");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c5a5bcf-0d38-4b2b-a8d2-b306a6d8b7da"),
                            Color = "White",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT101FL",
                            Make = "Freightliner",
                            Model = "Cascadia",
                            ModelYear = 2021,
                            TruckNumber = 101
                        },
                        new
                        {
                            Id = new Guid("bbbe9c6e-cda4-4b80-8988-e7456020dfe7"),
                            Color = "Blue",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT102VL",
                            Make = "Volvo",
                            Model = "VNL 760",
                            ModelYear = 2020,
                            TruckNumber = 102
                        },
                        new
                        {
                            Id = new Guid("d1fda9c2-5a0a-4ca0-8a3d-b417c40d68c9"),
                            Color = "Red",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT103KW",
                            Make = "Kenworth",
                            Model = "T680",
                            ModelYear = 2019,
                            TruckNumber = 103
                        },
                        new
                        {
                            Id = new Guid("d833d70d-e77e-4e39-b700-0a743b2f1ed6"),
                            Color = "Black",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT104PB",
                            Make = "Peterbilt",
                            Model = "579",
                            ModelYear = 2022,
                            TruckNumber = 104
                        },
                        new
                        {
                            Id = new Guid("5c1f054b-efef-4ee6-81cc-9f41e7c02ea2"),
                            Color = "Silver",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT105MK",
                            Make = "Mack",
                            Model = "Anthem",
                            ModelYear = 2021,
                            TruckNumber = 105
                        },
                        new
                        {
                            Id = new Guid("be8b8f36-0cfe-4509-98b5-2e779a9f8b07"),
                            Color = "Yellow",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT106IN",
                            Make = "International",
                            Model = "LT",
                            ModelYear = 2020,
                            TruckNumber = 106
                        },
                        new
                        {
                            Id = new Guid("f4b963fd-1d56-4296-92a6-c92366a67bfc"),
                            Color = "Gray",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT107FL",
                            Make = "Freightliner",
                            Model = "Coronado",
                            ModelYear = 2018,
                            TruckNumber = 107
                        },
                        new
                        {
                            Id = new Guid("cd0f5805-9409-420b-b6a3-740dfdba84a0"),
                            Color = "White",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT108KW",
                            Make = "Kenworth",
                            Model = "W990",
                            ModelYear = 2021,
                            TruckNumber = 108
                        },
                        new
                        {
                            Id = new Guid("c303b365-bb6e-4a43-b473-61d25a9e39d3"),
                            Color = "Blue",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT109VL",
                            Make = "Volvo",
                            Model = "VNL 860",
                            ModelYear = 2022,
                            TruckNumber = 109
                        },
                        new
                        {
                            Id = new Guid("bfa9f0a5-c189-4cc9-8e65-dfa218ec4f60"),
                            Color = "Red",
                            IsAvailable = true,
                            IsDeleted = false,
                            LicensePlate = "LT110PB",
                            Make = "Peterbilt",
                            Model = "389",
                            ModelYear = 2020,
                            TruckNumber = 110
                        });
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.TruckPart", b =>
                {
                    b.Property<Guid>("TruckId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Game identifier");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Part identifier");

                    b.HasKey("TruckId", "PartId");

                    b.HasIndex("PartId");

                    b.ToTable("TrucksParts");
                });

            modelBuilder.Entity("BrokerCompanyDriverManager", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.BrokerCompany", null)
                        .WithMany()
                        .HasForeignKey("BrokerCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.DriverManager", null)
                        .WithMany()
                        .HasForeignKey("DriverManagersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Dispatch", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.AvailableDispatch", null)
                        .WithMany("Dispatches")
                        .HasForeignKey("AvailableDispatchId");

                    b.HasOne("TruckingSystem.Data.Models.CompletedDispatch", null)
                        .WithMany("Dispatches")
                        .HasForeignKey("CompletedDispatchId");

                    b.HasOne("TruckingSystem.Data.Models.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.DriverManager", "DriverManager")
                        .WithMany("Dispatches")
                        .HasForeignKey("DriverManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Load", "Load")
                        .WithMany()
                        .HasForeignKey("LoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithMany()
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("DriverManager");

                    b.Navigation("Load");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.DriverManager", "DriverManager")
                        .WithMany("Drivers")
                        .HasForeignKey("DriverManagerId");

                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId");

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithOne("Driver")
                        .HasForeignKey("TruckingSystem.Data.Models.Driver", "TruckId");

                    b.Navigation("DriverManager");

                    b.Navigation("Trailer");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Load", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.BrokerCompany", "BrokerCompany")
                        .WithMany("Loads")
                        .HasForeignKey("BrokerCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Driver", "Driver")
                        .WithMany("Loads")
                        .HasForeignKey("DriverId");

                    b.Navigation("BrokerCompany");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.Trailer", "Trailer")
                        .WithOne("Truck")
                        .HasForeignKey("TruckingSystem.Data.Models.Truck", "TrailerId");

                    b.Navigation("Trailer");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.TruckPart", b =>
                {
                    b.HasOne("TruckingSystem.Data.Models.Part", "Part")
                        .WithMany("TruckParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TruckingSystem.Data.Models.Truck", "Truck")
                        .WithMany("TrucksParts")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.AvailableDispatch", b =>
                {
                    b.Navigation("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.BrokerCompany", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.CompletedDispatch", b =>
                {
                    b.Navigation("Dispatches");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Driver", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.DriverManager", b =>
                {
                    b.Navigation("Dispatches");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Part", b =>
                {
                    b.Navigation("TruckParts");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Trailer", b =>
                {
                    b.Navigation("Truck");
                });

            modelBuilder.Entity("TruckingSystem.Data.Models.Truck", b =>
                {
                    b.Navigation("Driver");

                    b.Navigation("TrucksParts");
                });
#pragma warning restore 612, 618
        }
    }
}
